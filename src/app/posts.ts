export const  POSTS =[
    {
      "id": "5d021a6ff3ff0b1592319405",
      "uuid": "1d9ec746-c127-492b-8a5f-489bc6c9b4cc",
      "title": "Angular Tutorial: Angular universal on firebase hosting",
      "slug": "angular-tutorial-angular-universal-on-firebase-hosting",
      "html": "<!--kg-card-begin: markdown--><p>In this Angular Tutorial, ill tell you how you can make your standard angular<br>\napp to support Server-side rendering using angular universal and deploy it on<br>\nfirebase hosting with firebase functions</p>\n<p>I am assuming you already have an angular project</p>\n<h4 id=\"step1addangularuniversal\">Step 1: Add Angular Universal</h4>\n<p>First, you have to Add universal angular support to your angular application for<br>\nthat we will run one cmd</p>\n<blockquote>\n<p>Note you can find your project name in angular.json in your root folder</p>\n</blockquote>\n<pre><code>ng add \n --clientProject &lt;project name&gt;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*HLSXAkUbv-vrwLnHHJR2iQ.png\" alt=\"\"></p>\n<p>once it is done, you will see numerous changes in your project to know more<br>\nabout this transition visit <a href=\"https://angular.io/guide/universal\">Angular universal<br>\nofficial</a></p>\n<h4 id=\"step2makechangesinserverts\">Step 2: Make changes in server.ts</h4>\n<p>Next step is to make some changes in your server.ts</p>\n<ol>\n<li>\n<p>) you need to add export in front of app variable</p>\n</li>\n<li>\n<p>) you need to comment the listening of your app which is typically at the end<br>\nof server .ts file</p>\n</li>\n</ol>\n<h4 id=\"step3exportyourappaslibrary\">Step 3: Export your app as Library</h4>\n<p>now you need to export your app as a library with a library target as umd in<br>\nwebpack configuration typically its name is webpack.server.config.js</p>\n<pre><code>output: {\npath: path.join(__dirname, 'dist'),\nlibrary:'app',\nlibraryTarget:'umd',\nfilename: '[name].js'\n},\n</code></pre>\n<h4 id=\"step4initializeandconfigurefirebase\">Step 4: Initialize and configure firebase</h4>\n<p>in this step, we first need to install firebase tools</p>\n<p>then we need to login into firebase from our cli</p>\n<p>and then we will initialize firebase functions a firebase hosting in our project</p>\n<blockquote>\n<p>note while initializing firebase function choose typescript as your language</p>\n</blockquote>\n<pre><code>npm g firebse-tools\nonce the above cmd successds\n\nfirebase login\n\nfirebase init\n</code></pre>\n<p>once you have firebase in your angular project we need to make some changes in<br>\nour firebase.json file (it will a new file created after firebase init)</p>\n<p>we need to change the rewrite property in it</p>\n<pre><code>&quot;function&quot;: &quot;angularUniversalFunction&quot;\n</code></pre>\n<h4 id=\"step5buildyourproject\">step 5: Build your project</h4>\n<pre><code>npm run build:ssr\n</code></pre>\n<p>the above cmd will generate a dist folder which have3 things in it a browser<br>\nfolder a server folder and server.js file</p>\n<p>Step 6: Automate the build folder movement</p>\n<p>we need to somehow copy the build folder from the root project to the functions<br>\nfolder for that we will use fs-extra package so</p>\n<p>Visit <a href=\"https://www.smartcodehub.com/#\">Smartcodehub</a></p>\n<pre><code>npm i --save fs-extra\n</code></pre>\n<p>after this cmd, we will create one file and name it as movedist.js, and the<br>\ncontent will be</p>\n<pre><code>const fs = require('fs-extra');\n(\n    async()=&gt;{\n        const src = './dist';\n        const dist = './functions/dist';\n\nawait fs.remove(dist);\n        await fs.copy(src,dist);\n    }\n)()\n</code></pre>\n<p>this function will copy the dist from the root and paste it in functions folder</p>\n<h4 id=\"step7configureourprimaryfirebasefunction\">step 7: configure our primary firebase function</h4>\n<p>in this step, we need to set our primary firebase function which is in functions<br>\nfolder src directory the filename is index.ts</p>\n<pre><code>import * as functions from 'firebase-functions';\n\nconst universal  = require(`${process.cwd()}/dist/server`).app;\n\nexport const angularUniversalFunction = functions.https.onRequest(universal);\n</code></pre>\n<h4 id=\"step8deploythefirebasefunction\">step 8: deploy the firebase function</h4>\n<pre><code>rebuild your project\n\nnpm run build:ssr\nnode movedist.js\n\ncd functions\nfirebase deploy\n</code></pre>\n<p>Thas it Visits <a href=\"https://www.smartcodehub.com/#\">Smartcodehub</a></p>\n<p>A Passionate developer with 6 years of hands-on experience and a man behind<br>\nSmartcodehub Visit <a href=\"https://www.smartcodehub.com/\">https://www.smartcodehub.com</a></p>\n<!--kg-card-end: markdown-->",
      "comment_id": "5d01f1aad99a337c161a3c04",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/chapel-4245437_960_720.jpg",
      "featured": true,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:48:10.000+00:00",
      "updated_at": "2019-06-14T09:56:43.000+00:00",
      "published_at": "2019-06-13T06:49:47.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": "https://www.d-drops.com/angular-tutorial-angular-universal-on-firebase-hosting/",
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        },
        {
          "id": "5d021a6ff3ff0b15923193fb",
          "name": "firebase",
          "slug": "firebase",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/1_R4c8lHBHuH5qyqOtZb3h-w.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/firebase/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f8",
        "name": "Angular",
        "slug": "angular",
        "description": null,
        "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/angular/"
      },
      "url": "https://www.d-drops.com/angular-tutorial-angular-universal-on-firebase-hosting/",
      "excerpt": "In this Angular Tutorial, ill tell you how you can make your standard angular\napp to support Server-side rendering using angular universal and deploy it on\nfirebase hosting with firebase functions\n\nI am assuming you already have an angular project\n\nStep 1: Add Angular Universal\nFirst, you have to Add universal angular support to your angular application for\nthat we will run one cmd\n\n> Note you can find your project name in angular.json in your root folder\n\n\nng add \n --clientProject <project name"
    },
    {
      "id": "5d021a6ff3ff0b1592319404",
      "uuid": "802f46c4-7f7e-4809-b400-c6e37ce50faf",
      "title": "Angular lifecycle: The Difference Between Afterviewinit and Aftercontentinit",
      "slug": "angular-lifecycle-the-difference-between-afterviewinit-and-aftercontentinit",
      "html": "<!--kg-card-begin: markdown--><h2 id=\"learnhowtoansweroneofthemostfrequentlyaskedquestionsonangular\">Learn how to answer one of the most frequently asked questions on angular</h2>\n<p>interviews: what is the difference between Afterviewinit and Aftercontentinit?</p>\n<p>If you love angular, curious about it and want to use the technology as much as<br>\nyou can in your applications — you might have used these two rarely used angular<br>\nlifecycle hooks.</p>\n<h4 id=\"ngafterviewinitngaftercontentinit\">ngAfterviewinit &amp; ngAftercontentinit</h4>\n<p>‘Hooks’ are a way to get notified at a certain point or on a specific event.</p>\n<p>A component has a lifecycle managed by Angular. Angular creates it, renders it,<br>\ncreates and renders its children, checks it when its data-bound properties<br>\nchange and destroys it before removing it from the DOM.<br> In this article, we<br>\nwill only be focusing on ngAfterviewinit &amp; ngAftercontentinit lifecycle hooks</p>\n<h4 id=\"ngafterviewinitafterviewinit\">ngAfterViewInit (Afterviewinit )</h4>\n<p><strong>Afterviewinit Interface needs to implement for this lifecycle hook.</strong></p>\n<p>Respond after Angular initializes the component’s views and child views / the<br>\nbelief that a directive is in.</p>\n<p>Called once after the first ngAfterContentChecked().</p>\n<p>well not recommended but there are specific use cases where we have to go with<br>\nsome jquery plugins lets say we have date picker plugin and its initialize<br>\nsomething like</p>\n<blockquote>\n<p><strong>You should use angular date pipe this <strong><strong>is only for demonstation<br>\npur</strong></strong>pose</strong></p>\n</blockquote>\n<pre><code>$(&quot;#datetime&quot;).datepicker();\n</code></pre>\n<p>now in the above example, this plugin will only work when it finds the element<br>\nwith id=” DateTime” in short the HTML should render before we call this plugin</p>\n<p>the question is where should we place this line of code, now we have two options<br>\nfirst is constructor and second is ngoninit: but this will not work in both the<br>\ncases because when the constructor and ngoninit is called it is not confirmed<br>\nthat the view has loaded correctly<br> so as per our problem we want to get<br>\nnotified at the earliest possible place where the view has loaded, and of<br>\ncourse, the ngafterviewinit is that place <br> so after the view has initialized<br>\nngafterviewinit function will execute, and we can securely place our datepicker<br>\ninitialization code here at this point we are guaranteed that we have the HTML<br>\nrendered in our DOM</p>\n<h4 id=\"prerequisite\">Prerequisite</h4>\n<p><a href=\"https://www.smartcodehub.com/\">content projection</a></p>\n<p>What is content projection? I am assuming you have basics of angular in that<br>\ncase we have selector associated with every component right and when we render<br>\nit we use it like</p>\n<pre><code>&lt;some-component&gt;&lt;/some-component&gt;\n</code></pre>\n<p>and this will render the HTML of the component at a run time now suppose you<br>\nhave a condition were want to pass some data between our component selector and<br>\nthen render it in component</p>\n<pre><code>&lt;div&gt;\n   Some html content from parent component\n&lt;/div&gt;\n</code></pre>\n<p>and to pass it</p>\n<pre><code>&lt;some-component&gt;\n  &lt;div&gt;\n     Some html content from parent component\n  &lt;/div&gt;\n&lt;/some-component&gt;\n</code></pre>\n<p>this can be achieved from the content projection to render this outer supplied<br>\ncontent in your component at a specific place we will use `&lt;ng-content</p>\n<blockquote>\n<p>`</p>\n</blockquote>\n<pre><code>//in some.component.html\n\n&lt;div&gt;\n\n//where ever you want to render the content projected from outside //will say \n\n&lt;/div&gt;\n</code></pre>\n<p>this is a very high-level view of content projection</p>\n<h4 id=\"ngaftercontentinitaftercontentinit\">ngAfterContentInit (AfterContentinit )</h4>\n<p><strong>AfterContentinit Interface needs to implement for this lifecycle hook</strong></p>\n<p>Respond after Angular initializes the component’s views and child views / the<br>\nview that a directive is in.</p>\n<p>Called <em>once</em> after the first <code>ngAfterContentChecked()</code>.</p>\n<p><em>AfterContent</em> hooks are similar to the <em>AfterView</em> hooks. The critical<br>\ndifference is in the child component.</p>\n<ul>\n<li>The <em>AfterView</em> hooks concern <code>ViewChildren</code>, the child components whose element<br>\ntags appear <em>within</em> the component's template.</li>\n<li>The <em>AfterContent</em> hooks concern <code>ContentChildren</code>, the child components that<br>\nAngular projected into the component.</li>\n</ul>\n<p>The following <em>AfterContent</em> hooks take action based on changing values in a<br>\n<em>content child</em>, which can only be reached by querying for them via the property<br>\ndecorated with <a href=\"https://angular.io/api/core/ContentChild\">@ContentChild</a>.</p>\n<p>AfterContentComponent (class excerpts)</p>\n<pre><code>export class AfterContentComponent implements AfterContentChecked, AfterContentInit {\n  private prevHero = '';\n  comment = '';\n\n// Query for a CONTENT child of type `ChildComponent`\n  \n(ChildComponent) contentChild: ChildComponent;\n\nngAfterContentInit() {\n    // contentChild is set after the content has been initialized\n    this.logIt('AfterContentInit');\n    this.doSomething();\n  }\n\nngAfterContentChecked() {\n    // contentChild is updated after the content has been checked\n    if (this.prevHero === this.contentChild.hero) {\n      this.logIt('AfterContentChecked (no change)');\n    } else {\n      this.prevHero = this.contentChild.hero;\n      this.logIt('AfterContentChecked');\n      this.doSomething();\n    }\n  }\n  // ...\n}\n</code></pre>\n<h4 id=\"thanksalotforreadingityourclapscaninspireustowritemore\">Thanks a lot for reading it your claps can inspire us to write more</h4>\n<p>A Passionate developer with 6 years of hands-on experience and a man behind<br>\nSmartcodehub Visit <a href=\"https://www.smartcodehub.com/\">https://www.smartcodehub.com</a></p>\n<!--kg-card-end: markdown-->",
      "comment_id": "5d01f114d99a337c161a3bed",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/1_H8S3VzlP6VP0fAtiIs7O_A.png",
      "featured": false,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:45:40.000+00:00",
      "updated_at": "2019-06-13T06:47:27.000+00:00",
      "published_at": "2019-06-13T06:47:06.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f8",
        "name": "Angular",
        "slug": "angular",
        "description": null,
        "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/angular/"
      },
      "url": "https://www.d-drops.com/angular-lifecycle-the-difference-between-afterviewinit-and-aftercontentinit/",
      "excerpt": "Learn how to answer one of the most frequently asked questions on angular\ninterviews: what is the difference between Afterviewinit and Aftercontentinit?\n\nIf you love angular, curious about it and want to use the technology as much as\nyou can in your applications — you might have used these two rarely used angular\nlifecycle hooks.\n\nngAfterviewinit & ngAftercontentinit\n‘Hooks’ are a way to get notified at a certain point or on a specific event.\n\nA component has a lifecycle managed by Angular. Angu"
    },
    {
      "id": "5d021a6ff3ff0b1592319403",
      "uuid": "fbce69a0-ab88-4740-b813-b586108aa937",
      "title": "Angular Tutorials - Angular Application Architecture",
      "slug": "angular-tutorials-angular-application-architecture",
      "html": "<!--kg-card-begin: markdown--><p>In this <a href=\"https://www.smartcodehub.com\">Angular tutorials</a>, we won’t be writing<br>\nany code rather we will have a higher level view of how to think of <a href=\"https://angular.io/\">angular<br>\n</a>architecture in terms of the <a href=\"https://angular.io/\">angular module<br>\n</a>or angular ngmodule</p>\n<h3 id=\"whatisangular\">What is Angular</h3>\n<h3 id=\"br\"><br></h3>\n<h3 id=\"averyhighlevelviewofangular\">A Very High-Level View of angular</h3>\n<h3 id=\"br\"><br></h3>\n<p><a href=\"https://angular.io/\">angular </a>is a Framework Which allows us to create a simple<br>\nangular app a client-side application in **HTML and **<a href=\"https://www.typescriptlang.org/\">typescript<br>\n</a>(a language which compiles down to javascript)</p>\n<h3 id=\"ngmodulesindetail\">NGModules in detail</h3>\n<h3 id=\"br\"><br></h3>\n<p>Every <a href=\"https://angular.io/\">angular </a>Application contains at least one root<a href=\"https://www.smartcodehub.com\"><br>\nangular module</a> in it which is specific to the<br>\nangular module(not javascript modules) and is decorated with<br>\n<a href=\"https://angular.io/guide/ngmodules\">NgModule</a>decorator and typically named as<br>\n<strong>app module</strong> <br> Now it’s not compulsory that it will have only one angular<br>\nmodule and we will dig into it more but for now <br> An angular application is a<br>\nset of angular modules and each angular module can be considered as a group of<br>\nrelated things, basically modularizing an application means breaking and<br>\norganizing the angular application into sensefull pieces so that we can reuse<br>\nour code, manage our code and <strong>it increases the performance also with the help<br>\nof lazily loaded angular modules</strong> again we will get back to it shortly,<br>\nmoreover angular modules consolidate angular components, angular directives, and<br>\nangular pipes into cohesive blocks of functionality and this modules can be used<br>\nby other angular modules in your application <br> ngmodules are typescript<br>\nclasses which are just decorated with @NgModule Decorator</p>\n<p>it has 4 things in it they are</p>\n<ol>\n<li>Declaration: this property tells angular that which components, pipes, and<br>\ndirectives are part of these modules. It’s kind off we are binding our component<br>\ndirective to a ngmodule</li>\n<li>Providers: In this property, we will register our services in the ngmodules<br>\nwhich are required by our components in the modules or which can be consumed by<br>\nother modules when they import this module</li>\n<li>Import: if we want to use some other module in our ngmodule we have to import<br>\nthat module in this property</li>\n<li>Export: in this property, we register those components, directives, and pipes<br>\nwhich we want to make public so that other module’s component templates can use<br>\nthem.</li>\n</ol>\n<h3 id=\"thinkingofapplicationinngmodules\">Thinking of application in ngmodules</h3>\n<h3 id=\"br\"><br></h3>\n<p>Suppose you have an e-commerce application where a customer can register login<br>\nchange password manage his account see his orders and the admin can add ducts<br>\nchange the price of the products add images of the products. A customer can<br>\npurchase a product and pay for it</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*OLq89y3P6JMADWjF.jpg\" alt=\"\"></p>\n<p>just try to imagine it and come up with how many ngmodules you can have in it I<br>\nthink we can have multiple ngmodules in it <br> we can see r specific<br>\nfunctionality in it so we can encapsulate register login change password manage<br>\naccount into a module and we can name it as UserModule or more specifically<br>\nCustomerModule<br> And Similarly we can have Admin module which has specific<br>\npermissions and we can group the product and shipment related stuff in it and<br>\nname it something like InventoryModule</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*DGNiCfuVgsIkI234.jpg\" alt=\"\"></p>\n<h3 id=\"sharedmodule\">SharedModule</h3>\n<h3 id=\"br\"><br></h3>\n<p>now the interesting thing suppose for orders we have one service which gives us<br>\na list of orders based on user now if we see closely this service will be used<br>\nby both the modules CustomerModule (as the customer should be able to see his<br>\norders ) and InventoryModule (as admin can also see the orders and dispatch them<br>\n<br>  <br> so this order service is a very good condition to make it shared so<br>\nwhat we will do is we will create a shared module which will be used by both<br>\nother modules</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*1q4yxkyaxUE6_VKx.jpg\" alt=\"\"></p>\n<p><strong>NOTE: I know it can be improved up to a very good extent but this is only to<br>\ngrab the concept of using ngmodules</strong></p>\n<h3 id=\"lazyloadedmodule\">Lazy Loaded Module</h3>\n<h3 id=\"br\"><br></h3>\n<p>Now I hope you have a pretty good understanding of angular modules now let’s dig<br>\na bit more into it</p>\n<p>So now the admin functionality is totally different from Customer functionality<br>\nbut when we make a build or run our application it does not matter which module<br>\nI am on whether I am admin or customer the code behind will have the logic of<br>\nboth the modules</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*C6x1lUSdD0iqiCyw.png\" alt=\"\"></p>\n<p>So as you can see we obviously have a performance issue the code which I am not<br>\nus that is also being loaded in the browser to overcome this situation we can<br>\nmake our modules loaded on demand typically based on routing</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*S2C1fMFjiAwfKa87.png\" alt=\"\"></p>\n<p>so that it, for now, hope it may have helped you if it does</p>\n<br> \n<br> \n<!--kg-card-end: markdown-->",
      "comment_id": "5d01f072d99a337c161a3be1",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/grass-3085457_960_720.jpg",
      "featured": true,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:42:58.000+00:00",
      "updated_at": "2019-06-14T09:57:24.000+00:00",
      "published_at": "2019-06-13T06:43:33.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f8",
        "name": "Angular",
        "slug": "angular",
        "description": null,
        "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/angular/"
      },
      "url": "https://www.d-drops.com/angular-tutorials-angular-application-architecture/",
      "excerpt": "In this Angular tutorials [https://www.smartcodehub.com], we won’t be writing\nany code rather we will have a higher level view of how to think of angular\n[https://angular.io/]architecture in terms of the angular module\n[https://angular.io/]or angular ngmodule\n\nWhat is Angular\n\n\nA Very High-Level View of angular\n\n\nangular [https://angular.io/]is a Framework Which allows us to create a simple\nangular app a client-side application in **HTML and **typescript\n[https://www.typescriptlang.org/](a langu"
    },
    {
      "id": "5d021a6ff3ff0b1592319402",
      "uuid": "e0413a82-21fa-4023-9998-93f0f13eb35e",
      "title": "Angular tutorials | Integrating angular with bootstrap",
      "slug": "angular-tutorials-integrating-angular-with-bootstrap-2",
      "html": "<!--kg-card-begin: markdown--><h4 id=\"inthisangulartutorialwewillseehowwecanintegratebootstrapwith\">In this angular tutorial, we will see how we can integrate bootstrap with</h4>\n<p>angular to build a beautiful experience</p>\n<br> \n<h3 id=\"bootstrap\">Bootstrap</h3>\n<p>World most famous front-end component library to Build responsive, mobile-first<br>\nprojects on the web. It is a <a href=\"https://en.wikipedia.org/wiki/Free_and_open-source\">free and<br>\nopen-source</a> <a href=\"https://en.wikipedia.org/wiki/CSS_framework\">CSS<br>\n</a>framework. It contains<br>\n<a href=\"https://en.wikipedia.org/wiki/CSS\">CSS</a>- and (optionally)<br>\n<a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>-based design templates<br>\nfor <a href=\"https://en.wikipedia.org/wiki/Web_design#Typography\">typography</a>,<br>\n<a href=\"https://en.wikipedia.org/wiki/Form_(HTML)\">forms</a>,<br>\n<a href=\"https://en.wikipedia.org/wiki/Button_(computing)#HTML\">buttons</a>,<br>\n<a href=\"https://en.wikipedia.org/wiki/Web_navigation#Local_website_navigation\">navigation</a>,<br>\nand other interface components</p>\n<br> \n<h3 id=\"settingupanangularprojectwithangularcli\">Setting Up An Angular Project With Angular CLI</h3>\n<p>First, let’s start by creating a new Angular project. The easiest way to do so<br>\nis to use the Angular Command Line Interface (CLI) to generate a new project.<br>\nFirst, you need to make sure that Angular CLI is installed on your system. As<br>\nAngular CLI comes as an NPM package the installation can be done by using the<br>\nfollowing command:<br>  <br>  <code>$ npm install -g @angular/cli</code></p>\n<p>For more details visit <a href=\"https://www.smartcodehub.com\">Angular Tutorials</a>-<br>\nDevelopment Environment Setup an article where I showed how to quickly set up<br>\nyour development environment ok so once you have your project ready go ahead and<br>\nhit ng serve -o and your application will start</p>\n<br> \n<h3 id=\"installbootstrap\">Install Bootstrap</h3>\n<p>Now that the Angular project is ready and running we can continue and add<br>\nBootstrap to the project. There are different ways of adding bootstrap to our<br>\nproject.</p>\n<h4 id=\"usingbootstrapcdn\">Using Bootstrap CDN</h4>\n<br> \n<p>head over to <a href=\"https://www.getbootstrap.com\">get bootstrap</a> the official website<br>\nof bootstrap and hit on get started button</p>\n<p>Copy-paste the stylesheet <code>&lt;link&gt;</code> into your <code>&lt;head&gt;</code> before all other<br>\nstylesheets</p>\n<pre><code>&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;Projectone&lt;/title&gt;\n  &lt;base href=&quot;/&quot;&gt;\n&lt;!-- Bootstrap css --&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;\n&quot; \n  integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot; \n  crossorigin=&quot;anonymous&quot;&gt;\n\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n  &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;\n\n&lt;/head&gt;\n</code></pre>\n<p>the next step is to paste all the js scripts in you body tag at the end</p>\n<pre><code>&lt;body&gt;\n  &lt;app-root&gt;&lt;/app-root&gt;\n\n&lt;!-- Bootstrap Scripts --&gt;\n  &lt;script src=&quot;\n&quot;\n    integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot;\n    crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;\n&quot;\n    integrity=&quot;sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1&quot;\n    crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;\n&quot;\n    integrity=&quot;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM&quot;\n    crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n    \n&lt;/body&gt;\n</code></pre>\n<p>your full html will look like this</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6xVfgiO5A6rtoWKPaIORTA.png\" alt=\"\"></p>\n<p>Time to test hit ng serve -o and it should work as expected</p>\n<h4 id=\"usingbootstrapwithnpm\">Using Bootstrap with npm</h4>\n<p>the other way to use bootstrap is to install bootstrap as an npm package and<br>\nthen use</p>\n<p>Bootstrap depends on Jquery and popperjs so we will need to include that also as<br>\na peer dependency</p>\n<pre><code>npm i jquery popperjs bootstrap --save\n</code></pre>\n<p>the above command will install jquery poppers and bootstrap as pm package</p>\n<p>now we need to configure css and js in our angular.json file (the recommended<br>\nway)</p>\n<p>so head over to your angular.json file and there you will find a styles array<br>\nand scripts array</p>\n<p>just paste this lines (nothing more than imports of css and js from<br>\nnode_modules)</p>\n<pre><code>&quot;styles&quot;: [\n              &quot;src/styles.scss&quot;,\n              &quot;./node_modules/bootstrap/dist/css/bootstrap.min.css&quot;\n            ],\n&quot;scripts&quot;: [\n              &quot;./node_modules/jquery/dist/jquery.min.js&quot;,\n              &quot;./node_modules/popper.js/dist/umd/popper.min.js&quot;,\n              &quot;./node_modules/bootstrap/dist/js/bootstrap.min.js&quot;\n            ],\n</code></pre>\n<p>once you do that restart your application as whenever you make any changes to<br>\nthe angular.json file you need to restart the application</p>\n<br> \n<br> \n<br> \n<!--kg-card-end: markdown-->",
      "comment_id": "5d01f01ad99a337c161a3bd1",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/view-1844111_960_720-1.jpg",
      "featured": true,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:41:30.000+00:00",
      "updated_at": "2019-06-14T09:57:46.000+00:00",
      "published_at": "2019-06-13T06:42:42.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        },
        {
          "id": "5d021a6ff3ff0b15923193f9",
          "name": "Bootstrap",
          "slug": "bootstrap",
          "description": null,
          "feature_image": "https://www.d-drops.com/content/images/2019/06/bootstrap-stack-490x412.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/bootstrap/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f8",
        "name": "Angular",
        "slug": "angular",
        "description": null,
        "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/angular/"
      },
      "url": "https://www.d-drops.com/angular-tutorials-integrating-angular-with-bootstrap-2/",
      "excerpt": "In this angular tutorial, we will see how we can integrate bootstrap with\nangular to build a beautiful experience\n\n\nBootstrap\nWorld most famous front-end component library to Build responsive, mobile-first\nprojects on the web. It is a free and\nopen-source [https://en.wikipedia.org/wiki/Free_and_open-source]  CSS\n[https://en.wikipedia.org/wiki/CSS_framework]framework. It contains\nCSS [https://en.wikipedia.org/wiki/CSS]- and (optionally)\nJavaScript [https://en.wikipedia.org/wiki/JavaScript]-based "
    },
    {
      "id": "5d021a6ff3ff0b1592319401",
      "uuid": "d45704c8-8db6-427d-a723-e86042e9ee37",
      "title": "React.js: an improved introduction",
      "slug": "react-js-an-improved-introduction",
      "html": "<!--kg-card-begin: markdown--><p>React.js: an improved introduction into this most potent UI library created.</p>\n<p>Regrettably, the majority of the React tutorials on the market don’t have any<br>\nconsideration for the best clinics and do not always teach you that the ” right”<br>\nsolution to complete React.:::</p>\n<p>Within this tutorial, I’ll examine the fundamentals of both React, and also the<br>\nmost popular bad methods that you may encounter.:::</p>\n<p>This tutorial will become long, therefore be certain that you grab your self<br>\nsome coffee!:::</p>\n<p>Why select React?:::</p>\n<p>Before we get going, let us stop for a moment and observe why React really is<br>\nyour very best alternative.</p>\n<h4 id=\"brdeclarative\"><br> Declarative</h4>\n<p>In React, you clarify what things to leave (in the place of telling the browser<br>\nhow to take action ). This means that the sum of boilerplate is significantly<br>\ndecreased.:::</p>\n<p>In React you merely begin coding, it doesn’t have any component boiler-plate you<br>\nneed to build. There is some installation required, however, if it has to do<br>\nwith the components, you’re able to say them as pure purposes.:::</p>\n<p>JSX at React feels like HTML, there is no particular syntax to find out::::</p>\n<p>The learning curve is quite essential when deciding on a UI frame. React gets<br>\ngot the smallest amount of abstractions. If you realize JavaScript then you can<br>\nmost likely begin writing React code in one moment. Yes, it requires a while to<br>\ngrab best techniques, nevertheless, you’ll have the ability to begin quickly.:::</p>\n<h4 id=\"brfunctional\"><br> Functional</h4>\n<p>I think, React’s biggest strength stems from the simple fact you aren’t actually<br>\nmade to utilize classes. Classes over-complicate code-base without providing<br>\nsome advantages.:::</p>\n<p>In React, every one the UI may be considered a couple of absolute functions and<br>\nhaving pure acts to leave the UI is as a breath of oxygen.:::<br> “Fired up Mac<br>\nBook Pro with space grey I-phone 6s, black ballpoint pen, and also black a Sus<br>\ncordless optical mouse Together with table” from Fabian Grohs on Unsplash:::</p>\n<p>Now that I have hopefully convinced one to proceed together with React, let us<br>\nwrite some code!:::<br> <br></p>\n<h4 id=\"nodejs\">Node.js</h4>\n<p>Node.js is a JavaScript runtime environment that empowers us to categorize<br>\ntrendy React code!:::</p>\n<p>To start with, let us make certain you have Node.js installed.<br><br>\ncreate-react-app:::</p>\n<p>We are going to use create-react-app out of face-book to scaffold our own<br>\napplication. This really could be definitely the most widely used means to<br>\nestablish your environment and begin coding. In regards with lots of required<br>\ntools built, which helps to expel many decisions.:::</p>\n<p>To put in create-react-app worldwide::::</p>\n<p>Subsequently to scaffold your very first job run::::</p>\n<p>Create-react-app react-introduction:::</p>\n<p>That is all! Currently, to start the program::::</p>\n<p>C d react-intro:::<br> npm start:::</p>\n<p>This will establish a development host and can make it possible for one to start<br>\nthe newest and glistening note-taking program simply by heading to<br>\n<a href=\"http://localhost:3000/\">http://localhost:3000/</a> on your own browser.:::<br><br>\nBelow the hood:::</p>\n<p>Now, let us see how matters will work under the hood.:::<br> index.html:::</p>\n<p>That really is exactly what you will notice::::</p>\n<p>This is really where our React application will proceed. The full origin div<br>\nwill just be replaced with all the contents of the React application. Every<br>\nthing will stay unchanged.:::<br> index.js:::</p>\n<p>Now let us start src/index. js. This could be the record that bootstraps that<br>\nthe full React application. And incidentally, every one our React origin code<br>\nwill enter the srcdirectory.:::</p>\n<p>The lineup which really does the magical would be::::</p>\n<p>ReactDOM.render(, document.getElementById(‘origin’));:::</p>\n<p>This is a style of telling respond to shoot our Program component (we’ll share<br>\nit in a little ), and stick it over the origin div which has been set previously<br>\nover the index.html file.:::</p>\n<p>This looks much like HTML, does it not? That is named JSX, also is really a<br>\nspecial Java Script syntax which React uses to complete its own magic. Notice<br>\nthat it begins with a funding A — it’s , maybe not . This can be a tradition<br>\nemployed by React, that lets it disambiguate between routine HTML tags and React<br>\ncomponents that we’ve generated. Should you choosen’t start your components<br>\nhaving a capital letter, subsequently React wont be in a position to leave your<br>\ncomponents.:::</p>\n<p>Whenever using JSXwe also need to import React by the addition of the following<br>\npoint in yours. Js document::::</p>\n<p>Let us start src/app. js ::::</p>\n<p>That’s just what the lineup category Program extends Component does. All of the<br>\nReact elements ought to employ a render system — since you might have guessed,<br>\neach the manufacturing is occurring within this particular method. The leave<br>\nsystem needs to return the markup to be left handed.:::</p>\n<p>A little side-note: the className feature is comparable to this class feature in<br>\nHTML, also is utilized to assign CSS classes for styling. The class can be just<br>\na reserved keyword in JavaScript, and can’t be used to get a feature name.:::</p>\n<p>Let us recap::::</p>\n<p>The component is termed Program (funding A):::<br>  It expands the React.<br>\nComponent class,:::<br>  it must execute the render system, which yields the<br>\nmarkup.:::</p>\n<p>There are just two ways to make elements in React — both Class Components and<br>\nPractical Components. Because you might have noticed the case above works on the<br>\nClass Component. And, regrettably, most newcomers React tutorials encourage the<br>\nusage of Class Components.:::</p>\n<p>They have been tough to examine, often to grow very big, likely to bad<br>\nseparation of concerns, bunch logic together with demonstration (making testing<br>\nand debugging tougher ). Generally, you are going to take your self in the foot<br>\nby employing Course Components. Specially if you are a newcomer, I would<br>\nrecommend keeping away from them altogether.:::</p>\n<p>Okay, Class Components is awful, I do it. However, which would be the<br>\nalternatives? Functional Components. If a factor has nothing however, the leave<br>\nprocedure, then it’s a fantastic candidate for refactoring to an operating<br>\ncomponent. Let us see how the Program element created by create-react-app could<br>\nbe enhanced::::</p>\n<p>Watch what we did ? And should we Utilize ES6 arrow works, It’s going to seem<br>\neven better::::</p>\n<p>We’ve switched the course section to a function that yields the markup to be<br>\nleft.:::</p>\n<p>Consider this for a minute… A function that yields the mark up, there isn’t any<br>\nunnecessary boiler plate code, only pure mark up! Isn’t this amazing?:::</p>\n<p>The operational component reads far better and contains a greater signal to<br>\nnoise ratio.:::</p>\n<p>Within the following piece, we will stay together with Class Components, because<br>\nthey demand fewer abstractions, and therefore are less difficult to show the<br>\nheart React theories. When you are familiar with React fundamentals, I firmly<br>\nurge you to browse my in-depth informative article — Mastering React Functional<br>\nComponents using Recompose.:::</p>\n<p>Props is actually a theory fundamental to React. What Happens are exactly?<br>\nConsider a moment about parameters passed into an event. Props are only this —<br>\nparameters handed down to some part.:::</p>\n<p>This will Lead to another markup::::</p>\n<p>HeHey,ou! John Smith!:::</p>\n<p>Even the Greetingscomponent has been passed first-name and last name as<br>\nparameters, and also we only retrieve them by obtaining the props thing.:::</p>\n<p>Be aware that the unit got passed one props thing, maybe not just two worth for<br>\nfirst-name along with last name .:::</p>\n<p>We could simplify the code by Using this ES6 thing destructuringyntax::::</p>\n<p>Which usually means that we’re simply thinking about those 2 properties of this<br>\nprops thing. And also this, then, allows us obtaining the first-name and last<br>\nname worth directly, without needing to explicitly define props.firstName.:::</p>\n<p>Imagine if we are using class components alternatively?:::</p>\n<p>I have no idea about you personally, but in my experience, this looks a whole<br>\nlot more distended! We consistently need to explicitly utilize this.props.:::</p>\n<p>Single-Responsibility Principle may be really the most crucial programming rule<br>\nto followalong with It says that the module needs to do something, and it have<br>\nto perform it well. Perhaps not third rule can turn any codebase to a nightmare<br>\nthat’s not possible to retain.:::</p>\n<p>Just how do we violate this rule? The most usual manner is setting unrelated<br>\nthings from exactly the exact same file.:::</p>\n<p>I will refer to this Single Responsibility Rule several occasions in this<br>\nparticular tutorial.:::</p>\n<p>Beginners usually set numerous components in exactly the exact same file. Here<br>\nwe’ve set the Greetings and Program components inside precisely the exact same<br>\nfile.:::</p>\n<p>The littlest components (such as the Greetings component above) ought to be set<br>\nin a distinct file.:::</p>\n<p>Let us put the Greetings element to its particular file::::</p>\n<p>And to utilize it inside the Program part::::</p>\n<p>Be certain the file name matches the name. Program component ought to be set at<br>\nApp.js, Greetings component ought to be put at Greetings.js, etc.:::</p>\n<p>Condition is just another theory fundamental to React. That really is really<br>\nwhere you need to maintain your information things which could alter. Storing<br>\nthe value into a form element? Utilize state. Keeping tabs on dent inside your<br>\nmatch? Utilize state.:::</p>\n<p>Let us develop a simple form that ingests user’s name. Be aware that I am<br>\nintentionally with a class component to demo the idea. I demonstrate<br>\nre-factoring of aclass component to an operating component within my article<br>\nAssessing React Functional Components using Recompose.:::</p>\n<p>Okay, the person may type his email in to the shape, that will be fantastic!<br>\nImagine if not most our users’ titles are John? We had put ourselves at an<br>\nextremely awkward situation.:::</p>\n<p>Just how can we make use of the value into the enter signal? This really is the<br>\narea where enter handlers and condition are available in.:::</p>\n<p>Condition is essentially a plain JavaScript object that’s stored as a land<br>\ninside the SimpleForm category component.:::</p>\n<p>Our first-name input has got the onChange event handler. It fires each single<br>\ntime once the user puts a secret in to the enter. And the real estate<br>\nthis.onFirstNameChange inside our group manages the onChange events.:::</p>\n<p>Let us Look at this onFirstNameChange real estate::::</p>\n<p>This.setState(…):::</p>\n<p>That really is the way we upgrade the condition of the components. We aren’t<br>\ndesigned to upgrade the component condition directly, just via the setState<br>\ntechnique. Also also to upgrade the worthiness of this First-name condition<br>\nvalue we just pass an item together with all the updated values into this<br>\nsetState process::::</p>\n<p>undefined:::</p>\n<p>in this particular circumstance, event.target.value could be the value which has<br>\nbeen typed in to the form enter. In cases like this, this really is actually the<br>\nconsumer’s name.:::</p>\n<p>A negative note: we’ve not identified onFirstNameChange for a way. That is<br>\nexceedingly essential to specify it like an arrow function land to the class,<br>\nrather than an approach. When we had defined this like a procedure<br>\nalternatively, afterward that this could be bound to the form enter signal that<br>\npredicted the approach, maybe not into this class because we’d have expected.<br>\nThis little detail frequently strikes up beginners. That is just another reason<br>\nto prevent classes in Java Script.:::</p>\n<p>NoNow,et’s execute easy form calls with regular expressions — let us make sure<br>\nthat the initial name is three characters long, and contains just letters.:::</p>\n<p>We’ll add a second event handler for your own onBlur event — it’ll fire if an<br>\nindividual leaves the inputsignal. We’ll also add a second land to the country<br>\nfirstNameError. And we’ll display the identification mistake right under the<br>\nenter (if errors can be found ).:::<br>  Condition:::</p>\n<p>First, we have inserted a firstNameError house into the country::::</p>\n<p>Country =:::</p>\n<p>The identification itself is going on in the validateName arrow work above. It<br>\nonly assesses the enter against the regular expression::::</p>\n<p>When the validation fails, then we return the approval mistake. When the<br>\nvalidation succeeds, we then return an empty chain (which suggests laa lackf<br>\nmistake ). We’re using Java Script ternary expressions here in order to produce<br>\nthe code terser.:::</p>\n<p>undefined;:::</p>\n<p>Here we pull on the first-name from their country by employing ES6 thing<br>\ndestructuring syntax. The very first line is equal to::::</p>\n<p>Const first name = this.state.firstName;:::</p>\n<p>Subsequently we conduct the validation role described above together with the<br>\nfirst-name , and we place the firstNameError country land with all the mistake<br>\ncame back. When the validation failed, then the firstNameError is going to be<br>\nput. If it succeeds, then it’ll soon be put to an empty series.<br>  Leave<br>\nmethod:::</p>\n<p>And let’s take a look at that the render() process::::<br>  {:::</p>\n<p>render():::</p>\n<p>Here we’re yet more using ES6 thing destructuring to extract values out of their<br>\ncountry.:::</p>\n<p>{…:::<br>  onBlur=:::</p>\n<p>This line specifies the onFirstNameBlur work as event handler for its onBlur<br>\nevent.:::</p>\n<p>The div comprising the firstNameError is going to be left only as long as the<br>\nvalue is Truth-y.:::</p>\n<p>If you were following along, you then may have pointed out our variant isn’t<br>\nespecially pretty… Let us change that by the addition of some vertical<br>\nstyling!:::</p>\n<p>Fashions in React are inserted by simply passing the fashions inside the style<br>\nfeature.:::</p>\n<p>I am going to admit that I am not just a designer, however, my developer art is<br>\nlooking better today. Here is the kind of identification mistake:<br>  Bad<br>\nclinic #3 — Spray inside the part:::</p>\n<p>Here we have struck a different poor clinic, which sadly is overly ordinary —<br>\nputting the fashions inside the leave way of our parts. Additionally, it divides<br>\nour part with fashions, which somewhat simplifies readability.:::</p>\n<p>Which exactly are the remedies? Create a exceptional style thing which may<br>\ncomprise most our fashions. It’s considered a Fantastic practice to place the<br>\nfashions in a separate document::::</p>\n<p>And to utilize it inside our SimpleForm part::::</p>\n<p>This looks cleaner!:::</p>\n<p>Take away: set your fashions in a different file.:::</p>\n<p>Let us create the shape a Bit More interesting by adding a subject to input the<br>\nname::::</p>\n<p>Not much has changed — we’ve just reproduced the code to your own firstName<br>\ninputsignal, and duplicated its event handlers.:::</p>\n<p>Can I only say replicated ? Copy code is actually a major NO in applications<br>\ncreation and ought to be avoided in any way costs.:::<br>  Bad clinic #4 — maybe<br>\nnot dividing your parts.:::</p>\n<p>This lousy practice again return into the breach of Single-Responsibility<br>\nPrinciple. Let us change this.:::</p>\n<p>The inputs are nearly indistinguishable, and require some form of validation.<br>\nLet us employ some refactor-fu into our part, and Produce a reusable Text Field<br>\nelement::::</p>\n<p>I have just pulled among those elements out of the render strategy, converted it<br>\nin to a practical element, and handed it things that alter since props::::</p>\n<p>Fine, this reads far better today! We could go 1 step farther, and make loyal<br>\nText Field parts for your initial and last name::::</p>\n<p>Here we’re only turning a pre-made aspect of show the name. undefined) is your<br>\nbrand new Object Rush syntax — this implies that anything is passed as props<br>\nwill probably be spared to the break object. Subsequently to maneuver the flames<br>\nto the Text Field we are utilizing the Thing Spread syntax It takes the break<br>\nthing, spreads its own properties, and moves them down into the text field<br>\ncomponent.:::</p>\n<p>To put it differently we simply take what was passed to FirstNameField, also<br>\npass it off to text field .:::</p>\n<p>That really is exactly what our formfirmlooking enjoy today::::</p>\n<p>Definitely better!:::<br>  <br>  Course components are difficult to try (unlike<br>\nusable components). <br>  Poor separation of questions: In case we’re being<br>\nidle, then we’ll keep putting all in to a single class, which might grow to a<br>\n1000-line monstrosity as time passes (I have seen that happen, multiple times).<br>\n<br>  Course components have a tendency to put logic and demonstration together<br>\nin a class. That will be again awful for lots of concerns. <br>  Course<br>\ncomponents aren’t pure, and therefore are difficult to cause. Functional<br>\nelements, on the other hand, are all — they’ll always lead in exactly the same<br>\nmark being left for exactly the same input clocks. <br>  Functional components<br>\napply excellent design. You are made to consider design. <br>  No demand for<br>\nyour that this key word, that has ever been a significant source of<br>\nconfusion.:::</p>\n<br> \n<!--kg-card-end: markdown-->",
      "comment_id": "5d01efcad99a337c161a3bc1",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/1_B4Zn3LaAy8mbQiEPLDf3Lw.jpeg",
      "featured": false,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:40:10.000+00:00",
      "updated_at": "2019-06-13T06:41:18.000+00:00",
      "published_at": "2019-06-13T06:41:18.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193fa",
          "name": "react",
          "slug": "react",
          "description": null,
          "feature_image": "https://www.d-drops.com/content/images/2019/06/1200px-React-icon.svg.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/react/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193fa",
        "name": "react",
        "slug": "react",
        "description": null,
        "feature_image": "https://www.d-drops.com/content/images/2019/06/1200px-React-icon.svg.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/react/"
      },
      "url": "https://www.d-drops.com/react-js-an-improved-introduction/",
      "excerpt": "React.js: an improved introduction into this most potent UI library created.\n\nRegrettably, the majority of the React tutorials on the market don’t have any\nconsideration for the best clinics and do not always teach you that the ” right”\nsolution to complete React.:::\n\nWithin this tutorial, I’ll examine the fundamentals of both React, and also the\nmost popular bad methods that you may encounter.:::\n\nThis tutorial will become long, therefore be certain that you grab your self\nsome coffee!:::\n\nWhy "
    },
    {
      "id": "5d021a6ff3ff0b1592319400",
      "uuid": "c2e8db9e-3e18-47da-90ad-b23dd8ab781b",
      "title": "What's amazing in Angular 8?",
      "slug": "whats-amazing-in-angular-8",
      "html": "<!--kg-card-begin: markdown--><p>Let's see what angular 8 have for us</p>\n<br> \n<h4 id=\"angular800ishere\">Angular 8.0.0 is here!</h4>\n<br> \n<p>This release is mostly about Ivy and also the option to give it a try, but in<br>\naddition, it contains a couple of features and breaking adjustments. Hopefully,<br>\nthe upgrade should be quite easy since the Angular team composed a whole lot of<br>\nschematics which is going to do the heavy lifting for you.</p>\n<h4 id=\"typescript34\">TypeScript 3.4</h4>\n<br> \n<p>Angular 8.0 now supports TypeScript 3.4, and also requires it, and that means<br>\nyou’ll want to update.</p>\n<p>You can checkout out what TypeScript 3.3 along with TypeScript 3.4 brings on the<br>\nMicrosoft website.<br> Ivy</p>\n<p>Ivy is obviously a huge portion of the launch, and it took all their campaign<br>\nfrom the team this previous month. There’s so much to say about Ivy that I wrote<br>\na dedicated article about it.</p>\n<p>TL;DR: Ivy is the brand new compiler/runtime of Angular. It’ll enable very cool<br>\nfeatures in the future, but it’s currently concentrated on not breaking existing<br>\napplications.</p>\n<p>There are no real profits to do so today, however, you can give it a try to find<br>\nout whether nothing breaks on your program. Because, at some point, probably in<br>\nv9, Ivy is going to be the default. So the Angular team expects that the<br>\ncommunity will anticipate the change and provide feedback and that we’ll catch<br>\nall the remaining issues prior to v9.</p>\n<p>We tried it several of our apps and caught a few regressions, thus we’d strongly<br>\nadvise not to use it kindly in production.</p>\n<p>If you are feeling adventurous, you may add “enableIvy”: true in your<br>\nangularCompilerOptions, and restart your application: it currently uses Ivy!<br>\nCheck our article and the official guide for more info.<br> Bazel support</p>\n<p>As for Ivy, we composed a committed article about the best way best to construct<br>\nyour Angular applications with the new Bazel service.<br> Types<br><br>\nmarkAllAsTouched</p>\n<p>The AbstractControl course now offers a new way markAllAsTouchedas well as the<br>\npresent markAsDirty, markAsTouched, markAsPending, etc..</p>\n<p>Like markAsTouched, this new system marks a control as touched but in addition<br>\nall of its descendants.</p>\n<pre><code>Form.markAllAsTouched();\n\nFormArray.clear\n</code></pre>\n<p>The FormArray class now offers a clear approach, to swiftly remove all of the<br>\ncontrols it contains. You had to loop over the controllers to eliminate them one<br>\nby you.</p>\n<pre><code>//’customers’ is initialized with 2 users\nConst users fb.array([user1, user2]);\nusers.clear();\n// users is currently vacant\n</code></pre>\n<h4 id=\"routerlazyloadingwithimportsyntax\">Router Lazy-loading with import() syntax</h4>\n<p>New syntax has been introduced to announce your lazy-loading paths, using the<br>\nimport() syntax out of TypeScript (introduced in TypeScript 2.4.</p>\n<p>This is now the preferred way to announce a lazy-loading course, and also the<br>\nstring form was deprecated. This syntax is similar to the ECMAScript regular and<br>\nIvy will just encourage this.</p>\n<pre><code>/admin/admin.\n\nloadChildren: () =&gt; import(‘. /races/races. Module’).then(m =&gt; m.RacesModule)\n</code></pre>\n<p>A schematic supplied by the CLI will migrate your declarations for you,<br>\ntherefore this should be painless for those who operate ng update<br>\n<a href=\"http://twitter.com/angular/cli\">@angular/cli</a>. Take a look at our article<br>\nregarding Angular CLI 8.0 to find out more about this particular.<br> Location</p>\n<p>To assist people migrating from AngularJS, a whole lot of things have been added<br>\ninto the place solutions in Angular.</p>\n<p>PlatformLocation offers access to this hostname, interface, and protocol, and<br>\nalso a fresh getState() method allows to get the history.state. Even a<br>\nMockPlatformLocation can be available to facilitate testing. All this is really<br>\nbeneficial if you’re utilizing ngUpgrade, otherwise, you likely won’t need<br>\nit.<br> Service worker<br> Registration strategy</p>\n<p>The service worker registration has a new option that allows specifying if the<br>\nregistration ought to take place. Formerly, the support employee was waiting for<br>\nits program to be stable to register, to prevent slowing the start of the<br>\nprogram. But if you were starting a recurring asynchronous task (like a polling<br>\nprocess) on application bootstrap, the application was never steady since<br>\nAngular considers an application to be stable when there is no pending task.<br>\nHence that the service worker never registered, and you also needed to manually<br>\nwork around it. Together with the newest registrationStrategy choice, you can<br>\nnow let Angular manage this. There are several values possible:</p>\n<p>RegisterWhitstable, the default, as clarified above</p>\n<p>register immediately, that doesn’t await the app to be stable also registers the<br>\nService Worker right away</p>\n<p>register delay:$TIMEOUT using $TIMEOUT function as the number of milliseconds to<br>\nwait until the registration a function returning an Observable, to define a<br>\ncustomized strategy. The Service Worker will then register when the Observable<br>\naccelerates its first value.</p>\n<p>For example, if You Would like to register the Service Worker after 2 seconds:</p>\n<pre><code>Providers: [\nServiceWorkerModule.register (‘/news-worker. Js’,’ \n enabled: environment.production,\n registrationStrategy:’’registerDelay:2000'\n ),\n //…\n]\n</code></pre>\n<h4 id=\"maintainingaserviceworker\">Maintaining a Service Worker</h4>\n<p>It’s now also possible to bypass the Service Worker for a specific request by<br>\nincorporating the new-bypass header.</p>\n<h4 id=\"notableandbreakingchanges\">Notable and breaking changes</h4>\n<p>A couple of things have changed also need a little work from the part. A few of<br>\nthe adjustments are pushed by Ivy, and will there be to prepare our software.<br>\nBut the cool thing is the Angular team wrote schematics to make our life<br>\nsimpler.</p>\n<p>Simply run ng upgrade <a href=\"http://twitter.com/angular/heart\">@angular/heart</a> along<br>\nwith the schematics will update your own code. What exactly do these schematics<br>\ndo? Let’s find out!</p>\n<p>The ViewChild and ContentChild decorators currently must have a new alternative<br>\ncalled static. Let me explain why using a very simple example using a ViewChild:</p>\n<p>Let’s get that element in our part and log it in the lifecycle hooks ngOnInit<br>\nand ngAfterViewInit:</p>\n<p>Makes sense because AfterViewInit is called while the template initialization is<br>\nfinished.</p>\n<p>However, in Actuality, if the queried element is static (not wrapped in an<br>\nngIfor an ngFor), then It’s available in ngOnInit too:</p>\n<p>Static</p>\n<p>gives:</p>\n<p>This wasn’t documented advocated, but that is how it now works.</p>\n<p>With Ivy, however, the behavior changes to be consistent:</p>\n<pre><code>ngOnInit() \nconsole.log ('nit static’, this.staticDiv); // undefined (changed)\n\nngngAfterViewInit (\n console.log(‘after view init static’, this.staticDiv); // div\n</code></pre>\n<p>A brand new static flag has been released not to break Present applications, so<br>\nif you want to keep the old behavior even when You switch to Ivy, it is possible<br>\nto write:</p>\n<p><code>@ViewChild(‘static’, inactive: true ) static: ElementRef;</code></p>\n<p>along with the behavior will be just like the current one (the element is also<br>\navailable in ngOnInit).</p>\n<p>Note that if you include inactive: authentic on a lively element (wrapped in a<br>\ncondition or a loop), then it will not be available in ngOnInit nor in<br>\nngAfterViewInit!</p>\n<p>Static: false is going to be how Ivy acts by default.</p>\n<p>To not break existing software and also to ease the migration, then the Angular<br>\nteam wrote a Treaty that automatically assesses your program, and adds to the<br>\nstatic flag. It even offers two strategies:</p>\n<p>One based on your own templates, which will ensure that your program works (so<br>\nit is inclined to mark questions as static even when they aren’t). You are<br>\ncertain that it works, but it exposes you to issues should you wrap your static<br>\ncomponent in a condition or a loop afterward. <br>  One based on your use of the<br>\nquestion, which can be more error-prone (as it is harder for your schematic to<br>\nfigure it out), but will not mark the queries as static when they don’t need to<br>\nbe. So most inquiries will possess static: fictitious, which is going to be the<br>\ndefault option in Ivy.</p>\n<p>The first approach is used by default if you operate ng update because it is the<br>\nsafest, however, you can try the usage strategy by using<br>\nNG_STATIC_QUERY_USAGE_STRATEGY=true ng update.</p>\n<p>You are able to have a look at the official guide to find out more.</p>\n<p>That is exactly what the migration seems like (using failure in 1 component):</p>\n<p>— — — Static Query Migration — — —</p>\n<p>With Angular version 8, programmers will need to<br> explicitly specify the time<br>\nof ViewChild along with ContentChild questions. Read more about this here:<br><br>\n<a href=\"https://v8.angular.io/guide/static-query-migration\">https://v8.angular.io/guide/static-query-migration</a></p>\n<p>Some queries were not able to be migrated automatically. Please move those<br>\nmanually and apply the right timing.<br>  For more info on how to choose a flag,<br>\nplease see:<br><br>\n<a href=\"https://v8.angular.io/guide/static-query-migration\">https://v8.angular.io/guide/static-query-migration</a><br><br>\n⮑ home/home.component.ts@43:3: undefined</p>\n<p>Note that this only issues ViewChild along with ContentChild, not ViewChildren<br>\nalong with ContentChildren (which will work exactly the same fashion in Ivy and<br>\nView Engine).</p>\n<h3 id=\"document\">DOCUMENT</h3>\n<p>The <code>DOCUMENT</code><a href=\"https://angular.io/api/common/DOCUMENT\"> token</a> moved from<br>\n<code>@angular/platform-browser</code> to <code>@angular/common</code>. You can manually change it in<br>\nyour application, but a provided schematic will take care of it for you.</p>\n<h3 id=\"deprecatedwebworkerpackage\">Deprecated web worker package</h3>\n<p>The <code>@angular/platform-webworker</code> package enabled running your Angular<br>\napplication in a Web Worker. As this proved trickier than expected (for building<br>\nthe application, SEO…), and not that good performance-wise, the package has been<br>\ndeprecated and will be removed in the future.</p>\n<h3 id=\"deprecatedhttppackageremoved\">Deprecated HTTP package removed</h3>\n<p><code>@angular/http</code> has been removed from 8.0, after being replaced by<br>\n<code>@angular/common/http</code> in 4.3 and officially deprecated in 5.0, 18 months ago.<br>\nYou have probably already migrated to <code>@angular/common/http</code>, but if you didn’t,<br>\nnow you have to: the provided schematic will only remove the dependency from<br>\nyour <code>package.json</code>.</p>\n<!--kg-card-end: markdown-->",
      "comment_id": "5d01ef61d99a337c161a3bb2",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/1_WDWzRQSeg1O7rBzyNjKlBg.jpeg",
      "featured": false,
      "page": false,
      "meta_title": "D - Drops | Angular 8",
      "meta_description": null,
      "created_at": "2019-06-13T06:38:25.000+00:00",
      "updated_at": "2019-06-13T06:47:48.000+00:00",
      "published_at": "2019-06-13T06:39:53.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f8",
        "name": "Angular",
        "slug": "angular",
        "description": null,
        "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/angular/"
      },
      "url": "https://www.d-drops.com/whats-amazing-in-angular-8/",
      "excerpt": "Let's see what angular 8 have for us\n\n\nAngular 8.0.0 is here!\n\nThis release is mostly about Ivy and also the option to give it a try, but in\naddition, it contains a couple of features and breaking adjustments. Hopefully,\nthe upgrade should be quite easy since the Angular team composed a whole lot of\nschematics which is going to do the heavy lifting for you.\n\nTypeScript 3.4\n\nAngular 8.0 now supports TypeScript 3.4, and also requires it, and that means\nyou’ll want to update.\n\nYou can checkout out "
    },
    {
      "id": "5d021a6ff3ff0b15923193ff",
      "uuid": "e5aec34a-601d-4552-b0e7-5a61aa627321",
      "title": "Typescript tutorials: union types and literal types in typescript",
      "slug": "typescript-tutorials-union-types-and-literal-types-in-typescript",
      "html": "<!--kg-card-begin: markdown--><h4 id=\"letstrytoanswerthemostaskedinterviewquestionoftypescript\">Let’s try to answer the most asked interview question of typescript</h4>\n<br> \n<p>What are union and literal types in typescript? one of the most asked typescript<br>\ninterview questions</p>\n<p>In this <a href=\"https://www.smartcodehub.com\">typescript tutorial</a>, we will see what<br>\nunion types and literal types in typescript are</p>\n<h4 id=\"theproblemwithoutuniontype\">The problem without union type</h4>\n<br> \n<p>with typescript now we have a better control over our code, and we can express<br>\nthe things in more typed manner but some time we need a different behavior lets<br>\nsay I have an API which sends me data and sometimes its send me an object and<br>\nsome times a message in false case like not found or lousy request in that cases<br>\nI can not have one type of datatype right, so we have to use any type over their</p>\n<pre><code>function fetchrecords() {\n\n// we make our api call and in success call back \n      let data:any = result//result is the return from the api\n      //\n}\n</code></pre>\n<p>the code above looks working but if we dig more inside it we are moving away<br>\nfrom the essential behavior of typescript which is its type of support <br> so<br>\nnow we have two problems one is we want our type to be dynamic like it can be<br>\nstring also and a costume type lets say employee also <br> moreover, the other<br>\nis we want our data to be of the proper type (static type also)</p>\n<h4 id=\"uniontypeinaction\">Union type in Action</h4>\n<br> \n<p>to solve this kind of problems we have union types in typescript <br> so let’s<br>\nsee how our code looks when we apply union types to it</p>\n<pre><code>function fetch records() {\n// we make our API call and in success call back \n      let data:Employee | string = result\n//result is the return from the API      //\n}\n</code></pre>\n<p>so now the data can be of employee type or string type, and no other type is<br>\nvalid other than these two types</p>\n<h3 id=\"literaltypes\">Literal Types</h3>\n<br> \n<h4 id=\"problem\">Problem</h4>\n<p>now let’s take it a step ahead and see what literal types in typescript are <br><br>\nlet’s say I have a function</p>\n<pre><code>function getJuice(fruit:string){\n    let fruitjuice = ''\n    //we make juice of it \n    return fruitjuice;\n}\n</code></pre>\n<p>now the above function is simple to understand it takes a fruit makes its juice<br>\nand return the fruit juice <br> now let’s call it with some fruits</p>\n<pre><code>getJuice('Apple')\ngetJuice('Mango')\ngetJuice('computer')\n</code></pre>\n<p>now in the above code, you will see that apple and mango are valid fruits but<br>\nthe computer is not, and we don’t have any restriction as our function accepts<br>\nstring we can pass anything to it <br> however, it’s wrong right we need a way<br>\nfor the user only to enter valid items from a group of items lets to say the<br>\nfruit can only be ‘Apple,’ ‘Mango,’ ‘Orange.’<br> moreover, all other values<br>\npassed should be invalid in that case we use string literals as we are using<br>\nliteral for string type<br> so now let’s see how our code will look like</p>\n<h4 id=\"literaltypesinaction\">Literal types in action</h4>\n<pre><code>function getJuice(\n){\n    let fruitjuice = ''\n    //we make juice of it \n    return fruitjuice;\n}\n\ngetJuice('Apple')\ngetJuice('Mango')\ngetJuice('computer')\n</code></pre>\n<p>now the last line in the code ‘getJuice(computer’)’ will throw an error <br><br>\nthat is literal types <br> I hope it made your concept clear on what is literal<br>\nand union types</p>\n<br> \n<h4 id=\"thankyou\">Thank you</h4>\n<!--kg-card-end: markdown-->",
      "comment_id": "5d01ef06d99a337c161a3ba3",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/1_pm2RzMKcf2GNyZWiMLuQlw.jpeg",
      "featured": false,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:36:54.000+00:00",
      "updated_at": "2019-06-13T06:47:38.000+00:00",
      "published_at": "2019-06-13T06:38:02.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f9",
          "name": "Bootstrap",
          "slug": "bootstrap",
          "description": null,
          "feature_image": "https://www.d-drops.com/content/images/2019/06/bootstrap-stack-490x412.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/bootstrap/"
        },
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f9",
        "name": "Bootstrap",
        "slug": "bootstrap",
        "description": null,
        "feature_image": "https://www.d-drops.com/content/images/2019/06/bootstrap-stack-490x412.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/bootstrap/"
      },
      "url": "https://www.d-drops.com/typescript-tutorials-union-types-and-literal-types-in-typescript/",
      "excerpt": "Let’s try to answer the most asked interview question of typescript\n\nWhat are union and literal types in typescript? one of the most asked typescript\ninterview questions\n\nIn this typescript tutorial [https://www.smartcodehub.com], we will see what\nunion types and literal types in typescript are\n\nThe problem without union type\n\nwith typescript now we have a better control over our code, and we can express\nthe things in more typed manner but some time we need a different behavior lets\nsay I have a"
    },
    {
      "id": "5d021a6ff3ff0b15923193fe",
      "uuid": "8f717fd5-6640-4278-ad67-8c674d3fe1ee",
      "title": "Integrate Medium editor in angular 8",
      "slug": "integrate-medium-editor-in-angular-8",
      "html": "<!--kg-card-begin: markdown--><h4 id=\"angularexperiments\">ANGULAR EXPERIMENTS</h4>\n<h3 id=\"integratemediumeditorinangular8\">Integrate Medium editor in angular 8</h3>\n<h4 id=\"letsstepbystepintegratemediumeditorinangular8\">Let's Step by step Integrate Medium Editor in angular 8</h4>\n<p>Here is the Demo of what we will make</p>\n<br> \n<p><img src=\"https://cdn-images-1.medium.com/max/1200/1*V8PKdiGaC48UNxVH3Xxvvw.gif\" alt=\"\"><br>\n<span class=\"figcaption_hack\">An image can express in better way</span></p>\n<br> \n<br> \n<p>In this article, we will try to create a small editor like a medium</p>\n<h4 id=\"step1\">Step 1 :</h4>\n<p>so first thing first create a project in angular</p>\n<p>and you can use bootstrap to make it pretty good just add CDN links under the<br>\nindex.html</p>\n<pre><code>ng g new mediumeditor\n</code></pre>\n<p>This command will generate an angular starter application once it has completed<br>\ninstalling the dependencies and all</p>\n<h4 id=\"step2\">Step 2:</h4>\n<p>Install an npm package Mentioned below</p>\n<pre><code>npm install medium-editor --save\n</code></pre>\n<p>Include the css and js in angular.json file</p>\n<pre><code>&quot;styles&quot;: [\n              &quot;src/styles.scss&quot;,\n                &quot;node_modules/medium-editor/dist/css/medium-editor.min.css&quot;,\n               &quot;node_modules/medium-editor/dist/css/themes/default.css&quot;\n            ],\n            &quot;scripts&quot;: [&quot;node_modules/medium-editor/dist/js/medium-editor.min.js&quot;]\n</code></pre>\n<br> \n<h4 id=\"step3\">Step 3:</h4>\n<p>create a component as per your choice name ill create one with name create</p>\n<pre><code>ng g c create\n</code></pre>\n<h4 id=\"step4\">Step 4 :</h4>\n<p>go to newly created component.html and make a div and give it a template<br>\nreference of name lets say the <strong>editable</strong></p>\n<pre><code>&lt;div class=&quot;container mt-3 &quot;&gt;\n    &lt;div class=&quot;row justify-content-center&quot;&gt;\n            &lt;div \n class=' col-8' \n                    style=&quot;min-height: 85vh&quot;&gt;   \n           &lt;/div&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>Just wrapped it under some bootstrap classes to give basic stylings but the main<br>\nthing is div with a template reference <strong>editable</strong></p>\n<h4 id=\"step4\">Step 4 :</h4>\n<p>Go to your component class</p>\n<p>make a variable editor and a view child property name editable as bellow</p>\n<pre><code>editor:any;\n  \n('editable',{\n    static:true\n  }) editable:ElementRef;\n</code></pre>\n<h4 id=\"step5\">Step 5 :</h4>\n<p>now we will be using one lifecycle hook of angular that is ngAfterViewInit</p>\n<p>if you want to know more about it you can <a href=\"https://codeburst.io/difference-between-afterviewinit-and-aftercontentinit-a3e41d8dc24\">read here<br>\n</a></p>\n<pre><code>ngAfterViewInit(): void {\n    this.editor = new MediumEditor(this.editable.nativeElement)\n}\n</code></pre>\n<p>and this may give you an error like media editor is not defined in that case we<br>\nmay need to declare it at the top like</p>\n<pre><code>declare var MediumEditor:any;\n</code></pre>\n<p>And with these changes, you have almost created a small-medium editor for your<br>\nself give it a shot and you should see a cursor on your screen</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*XANlJflCU8DA9LdhZ2029Q.png\" alt=\"\"></p>\n<p>and you can write over their just select the text you have written and you see<br>\nthe magic</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-zba-nlLiV-pLQfxn1HGJA.png\" alt=\"\"></p>\n<h4 id=\"step6\">Step 6:</h4>\n<p>now let's say you need more options in your editor toolbar for that we have to<br>\npass a configuration object in the MediumEditor Constructor so, I have created a<br>\ndefault one</p>\n<pre><code>ngAfterViewInit(): void {\n    this.editor = new MediumEditor(this.editable.nativeElement,{\n    \n  });\n  }\n</code></pre>\n<p>and with changes, you will have lots of option available</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7ijLbnvKyXSDqtCE3Jft3Q.png\" alt=\"\"></p>\n<h4 id=\"step7\">Step 7:</h4>\n<br> \n<p>Now that you have an editor how to get data from it like if someone writes a<br>\npost then we should get HTML of that post write</p>\n<p>So what we will do is we will divide our Screen into two halves in one half we<br>\nwill have the editor and in the other half we will show the preview of the post</p>\n<p>we will modify our create.component.html a bit</p>\n<pre><code>&lt;div class=&quot;container mt-3 &quot;&gt;\n    &lt;div class=&quot;row justify-content-center&quot;&gt;\n            &lt;div #editable class=' col-6' style=&quot;min-height: 85vh&quot;&gt;&lt;/div&gt;\n            &lt;div *ngIf=&quot;editor&quot;  class=&quot;shadow col-6&quot; \n&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>note in the second div we are assigning the value of inner HTML as</p>\n<p>the editor is basically the medium editor if you remember in ngafterviewinit we<br>\nare storing the result of new MediumEditor(..) in the editor variable and we are<br>\nusing the same above</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*oOjCA14T731uO--kfzM-rw.png\" alt=\"\"></p>\n<p>So that it play with it and create something amazing</p>\n<p>So the final code will be</p>\n<pre><code>//Index.html\n\n&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;MediumEditor&lt;/title&gt;\n  &lt;base href=&quot;/&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;\n&quot; integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin=&quot;anonymous&quot;&gt;\n\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n  &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;app-root&gt;&lt;/app-root&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><strong>create.Component.html</strong></p>\n<pre><code>&lt;div class=&quot;container mt-3 &quot;&gt;\n    &lt;div class=&quot;row justify-content-center&quot;&gt;\n            &lt;div #editable class=' col-6' style=&quot;min-height: 85vh&quot;&gt;&lt;/div&gt;\n            &lt;div *ngIf=&quot;editor&quot;  class=&quot;shadow col-6&quot; [innerHTML]=&quot;editor.elements[0].innerHTML&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p><strong>create.component.ts</strong></p>\n<pre><code>import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '\n';\ndeclare var MediumEditor:any;\n({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.scss']\n})\nexport class CreateComponent implements OnInit,AfterViewInit {\n  editor:any;\n  \n('editable',{\n    static:true\n  }) editable:ElementRef;\n  ngAfterViewInit(): void {\n    this.editor = new MediumEditor(this.editable.nativeElement,{\n      paste: {\n        /* This example includes the default options for paste,\n           if nothing is passed this is what it used */\n        forcePlainText: false,\n        cleanPastedHTML: true,\n        cleanReplacements: [],\n        cleanAttrs: ['class', 'style', 'dir','name'],\n        cleanTags: ['meta'],\n        unwrapTags: []\n    },\n      toolbar: {\n          /* These are the default options for the toolbar,\n             if nothing is passed this is what is used */\n          allowMultiParagraphSelection: true,\n          buttons: BUTTONS,\n          diffLeft: 0,\n          diffTop: -10,\n          firstButtonClass: 'medium-editor-button-first',\n          lastButtonClass: 'medium-editor-button-last',\n          relativeContainer: null,\n          standardizeSelectionStart: false,\n          static: false,\n          /* options which only apply when static is true */\n          align: 'center',\n          sticky: false,\n          updateOnEmptySelection: false\n      }\n  });\n  }\n\nconstructor() { }\n\nngOnInit() {\n  }\n\n}\n\nconst BUTTONS = [\n'bold'\n,'italic'\n,'underline'\n\n,'subscript'\n,'superscript'\n,'anchor'\n,'quote'\n,'pre'\n,'orderedlist'\n,'unorderedlist'\n,'indent' \n,'justifyLeft'\n,'justifyCenter'\n,'justifyRight'\n,'justifyFull'\n,'h1'\n,'h2'\n,'h3'\n,'h4'\n,'h5'\n,'h6'\n\n]\n</code></pre>\n<br> \n<p>Thanks a lot</p>\n<!--kg-card-end: markdown--><p>Visit Smartcodehub For more<a href=\"https://www.smartcodehub.com\"> angular tutorials</a></p>",
      "comment_id": "5d01e9ffd99a337c161a3b95",
      "feature_image": "https://www.d-drops.com/content/images/2019/06/1_HRnhUYIjzpynC7P8C-l9Nw.png",
      "featured": true,
      "page": false,
      "meta_title": null,
      "meta_description": null,
      "created_at": "2019-06-13T06:15:27.000+00:00",
      "updated_at": "2019-06-13T09:56:36.000+00:00",
      "published_at": "2019-06-13T06:16:28.000+00:00",
      "custom_excerpt": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "5d021a6ff3ff0b15923193f8",
          "name": "Angular",
          "slug": "angular",
          "description": null,
          "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
          "visibility": "public",
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/tag/angular/"
        }
      ],
      "authors": [
        {
          "id": "1",
          "name": "Neeraj Dana",
          "slug": "neeraj",
          "profile_image": null,
          "cover_image": null,
          "bio": null,
          "website": null,
          "location": null,
          "facebook": null,
          "twitter": null,
          "meta_title": null,
          "meta_description": null,
          "url": "https://www.d-drops.com/author/neeraj/"
        }
      ],
      "primary_author": {
        "id": "1",
        "name": "Neeraj Dana",
        "slug": "neeraj",
        "profile_image": null,
        "cover_image": null,
        "bio": null,
        "website": null,
        "location": null,
        "facebook": null,
        "twitter": null,
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/author/neeraj/"
      },
      "primary_tag": {
        "id": "5d021a6ff3ff0b15923193f8",
        "name": "Angular",
        "slug": "angular",
        "description": null,
        "feature_image": "https://www.D - Drops.net/content/images/2019/06/Angular_full_color_logo.svg-1.png",
        "visibility": "public",
        "meta_title": null,
        "meta_description": null,
        "url": "https://www.d-drops.com/tag/angular/"
      },
      "url": "https://www.d-drops.com/integrate-medium-editor-in-angular-8/",
      "excerpt": "ANGULAR EXPERIMENTS\nIntegrate Medium editor in angular 8\nLet's Step by step Integrate Medium Editor in angular 8\nHere is the Demo of what we will make\n\n\n\nAn image can express in better way\n\n\n\nIn this article, we will try to create a small editor like a medium\n\nStep 1 :\nso first thing first create a project in angular\n\nand you can use bootstrap to make it pretty good just add CDN links under the\nindex.html\n\nng g new mediumeditor\n\n\nThis command will generate an angular starter application once it "
    }
  ]